# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MainWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import Background
from PyQt5.QtCore import *
from PyQt5.QtWidgets import QMainWindow, QMessageBox
from PyQt5.QtWidgets import QWidget, QFileDialog
from sqlite3 import *
from itertools import chain, combinations
import copy


class Ui_Form(QWidget):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(1143, 722)
        self.widget = QtWidgets.QWidget(Form)
        self.widget.setGeometry(QtCore.QRect(10, 20, 1121, 691))
        self.widget.setObjectName("widget")
        self.TitleLabel = QtWidgets.QLabel(self.widget)
        self.TitleLabel.setGeometry(QtCore.QRect(370, 60, 171, 111))
        font = QtGui.QFont()
        font.setPointSize(25)
        font.setBold(True)
        font.setWeight(75)
        self.TitleLabel.setFont(font)
        self.TitleLabel.setStyleSheet("color: rgba(255,255,255,210);")
        self.TitleLabel.setObjectName("TitleLabel")
        self.bg = QtWidgets.QLabel(self.widget)
        self.bg.setGeometry(QtCore.QRect(20, 20, 901, 561))
        self.bg.setStyleSheet("\n"
                              "border-image: url(:/bg/bg.jpg);\n"
                              "border-radius: 20px;")
        self.bg.setText("")
        self.bg.setObjectName("bg")
        self.bg_2 = QtWidgets.QLabel(self.widget)
        self.bg_2.setGeometry(QtCore.QRect(20, 20, 891, 561))
        self.bg_2.setStyleSheet("background-color: qradialgradient(spread:pad, cx:0.5, cy:0.5, radius:0.5, fx:0.5, fy:0.5, stop:0 rgba(76, 76, 76, 255), stop:1 rgba(255, 255, 255, 255));\n"
                                "border-radius: 20px;")
        self.bg_2.setText("")
        self.bg_2.setObjectName("bg_2")
        self.DeleteButton = QtWidgets.QPushButton(self.widget)
        self.DeleteButton.setGeometry(QtCore.QRect(670, 280, 141, 51))
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.DeleteButton.setFont(font)
        self.DeleteButton.setStyleSheet("QPushButton#DeleteButton{\n"
                                        "background-color: qlineargradient(spread:pad, x1:0, y1:0.505682, x2:1, y2:0.477, stop:0 rgba(20,47,78,219), stop:1 rgba(85,98,112,226));\n"
                                        "color: rgba(255,255,255,210);\n"
                                        "border-radius:5px;\n"
                                        "}\n"
                                        "\n"
                                        "QPushButton#DeleteButton:hover{\n"
                                        "background-color: qlineargradient(spread:pad, x1:0, y1:0.505682, x2:1, y2:0.477, stop:0 rgba(40,67,98,219), stop:1 rgba(105,118,132,226));\n"
                                        "}\n"
                                        "\n"
                                        "QPushButton#DeleteButton:pressed{\n"
                                        "padding-left:5px;\n"
                                        "padding-top:5px;\n"
                                        "background-color:rgba(105,118,132,200);\n"
                                        "}")
        self.DeleteButton.setObjectName("DeleteButton")
        self.ExecuteButton = QtWidgets.QPushButton(self.widget)
        self.ExecuteButton.setGeometry(QtCore.QRect(670, 370, 141, 51))
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.ExecuteButton.setFont(font)
        self.ExecuteButton.setStyleSheet("QPushButton#ExecuteButton{\n"
                                         "background-color: qlineargradient(spread:pad, x1:0, y1:0.505682, x2:1, y2:0.477, stop:0 rgba(20,47,78,219), stop:1 rgba(85,98,112,226));\n"
                                         "color: rgba(255,255,255,210);\n"
                                         "border-radius:5px;\n"
                                         "}\n"
                                         "\n"
                                         "QPushButton#ExecuteButton:hover{\n"
                                         "background-color: qlineargradient(spread:pad, x1:0, y1:0.505682, x2:1, y2:0.477, stop:0 rgba(40,67,98,219), stop:1 rgba(105,118,132,226));\n"
                                         "}\n"
                                         "\n"
                                         "QPushButton#ExecuteButton:pressed{\n"
                                         "padding-left:5px;\n"
                                         "padding-top:5px;\n"
                                         "background-color:rgba(105,118,132,200);\n"
                                         "}")
        self.ExecuteButton.setObjectName("ExecuteButton")
        self.QuitButton = QtWidgets.QPushButton(self.widget)
        self.QuitButton.setGeometry(QtCore.QRect(670, 470, 141, 51))
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.QuitButton.setFont(font)
        self.QuitButton.setStyleSheet("QPushButton#QuitButton{\n"
                                      "background-color: qlineargradient(spread:pad, x1:0, y1:0.505682, x2:1, y2:0.477, stop:0 rgba(20,47,78,219), stop:1 rgba(85,98,112,226));\n"
                                      "color: rgba(255,255,255,210);\n"
                                      "border-radius:5px;\n"
                                      "}\n"
                                      "\n"
                                      "QPushButton#QuitButton:hover{\n"
                                      "background-color: qlineargradient(spread:pad, x1:0, y1:0.505682, x2:1, y2:0.477, stop:0 rgba(40,67,98,219), stop:1 rgba(105,118,132,226));\n"
                                      "}\n"
                                      "\n"
                                      "QPushButton#QuitButton:pressed{\n"
                                      "padding-left:5px;\n"
                                      "padding-top:5px;\n"
                                      "background-color:rgba(105,118,132,200);\n"
                                      "}")
        self.QuitButton.setObjectName("QuitButton")
        self.tableWidget = QtWidgets.QTableWidget(self.widget)
        self.tableWidget.setGeometry(QtCore.QRect(450, 200, 161, 320))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)
        self.KeyLine = QtWidgets.QTextEdit(self.widget)
        self.KeyLine.setGeometry(QtCore.QRect(80, 200, 331, 320))
        self.KeyLine.setObjectName("KeyLine")
        font = QtGui.QFont()
        font.setPointSize(20)
        self.KeyLine.setFont(font)
        self.ImportButton = QtWidgets.QPushButton(self.widget)
        self.ImportButton.setGeometry(QtCore.QRect(670, 200, 141, 51))
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.ImportButton.setFont(font)
        self.ImportButton.setStyleSheet("QPushButton#ImportButton{\n"
                                        "background-color: qlineargradient(spread:pad, x1:0, y1:0.505682, x2:1, y2:0.477, stop:0 rgba(20,47,78,219), stop:1 rgba(85,98,112,226));\n"
                                        "color: rgba(255,255,255,210);\n"
                                        "border-radius:5px;\n"
                                        "}\n"
                                        "\n"
                                        "QPushButton#ImportButton:hover{\n"
                                        "background-color: qlineargradient(spread:pad, x1:0, y1:0.505682, x2:1, y2:0.477, stop:0 rgba(40,67,98,219), stop:1 rgba(105,118,132,226));\n"
                                        "}\n"
                                        "\n"
                                        "QPushButton#ImportButton:pressed{\n"
                                        "padding-left:5px;\n"
                                        "padding-top:5px;\n"
                                        "background-color:rgba(105,118,132,200);\n"
                                        "}")
        self.ImportButton.setObjectName("ImportButton")
        self.bg_2.raise_()
        self.bg.raise_()
        self.TitleLabel.raise_()
        self.DeleteButton.raise_()
        self.ExecuteButton.raise_()
        self.QuitButton.raise_()
        self.tableWidget.raise_()
        self.KeyLine.raise_()
        self.ImportButton.raise_()

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

        self.ImportButton.clicked.connect(self.browse_file)
        self.QuitButton.clicked.connect(lambda: self.close(Form))
        self.ExecuteButton.clicked.connect(
            lambda: self.find_key(self.tableWidget))
        self.DeleteButton.clicked.connect(
            lambda: self.delete(self.tableWidget))
        self.loadData()

    def browse_file(self):
        fname = QFileDialog.getOpenFileName(
            self, "Open File", "", "All Files (*);;Text Documents (*.txt)")
        label = fname[0]
        if label != '':
            connection = connect('testcase.db')
            cur = connection.cursor()
            query = f"""INSERT INTO FileName VALUES ('{label}')"""
            cur.execute(query)
            connection.commit()
            self.loadData()
            connection.close()

    def loadData(self):
        connection = connect('testcase.db')
        cur = connection.cursor()
        res = cur.execute("SELECT * FROM FileName")
        for row_number, row_data in enumerate(res):
            self.tableWidget.setRowCount(row_number)
            self.tableWidget.setColumnCount(len(row_data))
            self.tableWidget.insertRow(row_number)
            for column_number, data in enumerate(row_data):
                self.tableWidget.setItem(
                    row_number, column_number, QtWidgets.QTableWidgetItem(str(self.strip_filename(data))))
        self.tableWidget.sortItems(0, QtCore.Qt.AscendingOrder)

        connection.close()

    def strip_filename(self, filename):
        lst = filename.split("/")
        s = lst[-1]
        return s

    def powerset(self, iterable):
        "powerset([1,2,3]) --> () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)"
        s = list(iterable)
        return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))

    def read_file(self, filename):
        temp = []
        with open(filename, 'r') as f:
            temp = [[s for s in line.replace(' ', '')] for line in f]
        new_temp = []

        for i in temp:
            if i == ['\n']:
                continue
            new_temp.append(i)

        s_lst = []

        for i in new_temp:
            s = ''.join(i)
            if s[-1:] == '\n':
                s = s[:-1]
            s_lst.append(s)

        new_lst = []

        for i in s_lst:
            i = i.replace(';', '')
            new_lst.append(i)

        new_str_lst = []

        for i in new_lst:
            i = i.split('-')
            new_str_lst.append(i)

        r = new_str_lst[0]
        new_str_lst.remove(r)
        r = r[0]

        dic = {}

        for i in new_str_lst:
            dic[i[0]] = i[1]

        return (r, dic)

    def closure(self, r):
        dic = {}
        sub = self.powerset(r)

        temp = []
        for i in sub:
            temp.append(i)

        temp.remove(())

        new_temp = []

        for i in temp:
            i = ''.join(i)
            new_temp.append(i)

        for i in new_temp:
            dic[i] = i

        return dic

    def find_closure(self, dic, fd):
        while True:
            temp_clos = copy.deepcopy(dic)
            for i in dic:
                for j in fd:
                    if j in dic[i]:
                        dic[i] += fd[j]
                        subset = set(dic[i])
                        sorted_subset = sorted(subset)
                        sstring = ''.join(sorted_subset)
                        dic[i] = sstring

            if temp_clos == dic:
                break
        return dic

    def check_contain(self, a, b):
        flag = 0
        for i in a:
            for j in b:
                if i == j:
                    flag += 1
        if flag < len(a):
            return False
        else:
            return True

    def get_key(self, r):
        r = sorted(r, key=len)
        key = r.copy()
        for i in range(0, len(r)):
            for j in range(0, len(r)):
                if self.check_contain(r[i], r[j]) and len(r[i]) < len(r[j]) and r[j] in key:
                    key.remove(r[j])
        return key

    def find_key(self, tableWidget):
        mess = QMessageBox()
        mess.setIcon(QMessageBox.Warning)
        mess.setWindowIcon(QtGui.QIcon('warning.png'))
        mess.setStyleSheet("QLabel{min-height:30 px; font-size: 24px;}")
        mess.setWindowTitle("Execute")
        mess.setText("Are you sure you want to execute this testcase?")
        mess.setStandardButtons(QMessageBox.Yes | QMessageBox.No)
        question = mess.exec_()

        try:
            if question == QMessageBox.Yes:
                index = tableWidget.currentRow()
                data = tableWidget.item(index, 0).text()
                connection = connect('testcase.db')
                cur = connection.cursor()
                cur.execute(
                    "SELECT * FROM FileName WHERE FileName LIKE '%{}'".format(data))
                filename = str(cur.fetchall()[0])
                filename = filename[2::]
                filename = filename[:-3]
                connection.commit()
                input = self.read_file(filename)
                r = input[0]
                fd = input[1]
                dic = self.closure(r)
                temp_fd_lst = []

                for i in fd:
                    temp_fd_lst.append(i)
                    temp_fd_lst.append(fd[i])
                s = ''.join(temp_fd_lst)
                
                for i in s:
                    if i not in r:
                        mess = QMessageBox()
                        mess.setIcon(QMessageBox.Critical)
                        mess.setWindowIcon(QtGui.QIcon('cancel.png'))
                        mess.setStyleSheet(
                            "QLabel{min-height:30 px; font-size: 24px;}")
                        mess.setWindowIcon(QtGui.QIcon('cancel.png'))
                        mess.setWindowTitle("Error")
                        mess.setText("Not found attribute " + i)
                        mess.exec_()
                        return
                st = set()

                for i in s:
                    st.add(i)

                st = sorted(st)
                temp_fd_str = ''.join(st)
                clos = self.find_closure(dic, fd)

                key_lst = []

                for i in clos:
                    if clos[i] == r:
                        key_lst.append(i)

                key = self.get_key(key_lst)

                new_key = '\n'.join(key)
                self.KeyLine.setText(new_key)

        except Error as e:
            mess = QMessageBox()
            mess.setIcon(QMessageBox.Critical)
            mess.setWindowIcon(QtGui.QIcon('cancel.png'))
            mess.setStyleSheet("QLabel{min-height:30 px; font-size: 24px;}")
            mess.setWindowIcon(QtGui.QIcon('cancel.png'))
            mess.setWindowTitle("Error")
            mess.setText(e)
            mess.exec_()
        pass

    def delete(self, tableWidget):
        mess = QMessageBox()
        mess.setIcon(QMessageBox.Warning)
        mess.setWindowIcon(QtGui.QIcon('warning.png'))
        mess.setStyleSheet("QLabel{min-height:30 px; font-size: 24px;}")
        mess.setWindowTitle("Delete File")
        mess.setText("Are you sure you want to delete this file ?")
        mess.setStandardButtons(QMessageBox.Yes | QMessageBox.No)
        question = mess.exec_()

        try:
            if question == QMessageBox.Yes:
                index = tableWidget.currentRow()
                data = tableWidget.item(index, 0).text()
                connection = connect('testcase.db')
                cur = connection.cursor()
                cur.execute(
                    "DELETE FROM FileName WHERE FileName LIKE '%{}'".format(data))
                connection.commit()
                tableWidget.removeRow(index)

        except Error as e:
            mess = QMessageBox()
            mess.setIcon(QMessageBox.Critical)
            mess.setWindowIcon(QtGui.QIcon('cancel.png'))
            mess.setStyleSheet("QLabel{min-height:30 px; font-size: 24px;}")
            mess.setWindowIcon(QtGui.QIcon('cancel.png'))
            mess.setWindowTitle("Error")
            mess.setText(e)
            mess.exec_()
        pass

    def close(self, Form):
        mess = QMessageBox()
        mess.setIcon(QMessageBox.Warning)
        mess.setWindowTitle("Window Close")
        mess.setWindowIcon(QtGui.QIcon('warning.png'))
        mess.setStyleSheet("QLabel{min-height:30 px; font-size: 24px;}")
        mess.setText("Are you sure you want to close the window ?")
        mess.setStandardButtons(QMessageBox.Yes | QMessageBox.No)
        question = mess.exec_()
        if question == QMessageBox.Yes:
            Form.close()

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.TitleLabel.setText(_translate("Form", "FD Tool"))
        self.DeleteButton.setText(_translate("Form", "Delete"))
        self.ExecuteButton.setText(_translate("Form", "Execute"))
        self.QuitButton.setText(_translate("Form", "Quit"))
        self.ImportButton.setText(_translate("Form", "Import"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_Form()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec_())
